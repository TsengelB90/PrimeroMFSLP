import React, { PureComponent, Component } from 'react';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

var bs = [];
bs[2000] = [2000, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31];
bs[2001] = [2001, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2002] = [2002, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30];
bs[2003] = [2003, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31];
bs[2004] = [2004, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31];
bs[2005] = [2005, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2006] = [2006, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30];
bs[2007] = [2007, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31];
bs[2008] = [2008, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31];
bs[2009] = [2009, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2010] = [2010, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30];
bs[2011] = [2011, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31];
bs[2012] = [2012, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30];
bs[2013] = [2013, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2014] = [2014, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30];
bs[2015] = [2015, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31];
bs[2016] = [2016, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30];
bs[2017] = [2017, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2018] = [2018, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30];
bs[2019] = [2019, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31];
bs[2020] = [2020, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2021] = [2021, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2022] = [2022, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30];
bs[2023] = [2023, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31];
bs[2024] = [2024, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2025] = [2025, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2026] = [2026, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31];
bs[2027] = [2027, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31];
bs[2028] = [2028, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2029] = [2029, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30];
bs[2030] = [2030, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31];
bs[2031] = [2031, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31];
bs[2032] = [2032, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2033] = [2033, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30];
bs[2034] = [2034, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31];
bs[2035] = [2035, 30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31];
bs[2036] = [2036, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2037] = [2037, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30];
bs[2038] = [2038, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31];
bs[2039] = [2039, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30];
bs[2040] = [2040, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2041] = [2041, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30];
bs[2042] = [2042, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31];
bs[2043] = [2043, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30];
bs[2044] = [2044, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2045] = [2045, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30];
bs[2046] = [2046, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31];
bs[2047] = [2047, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2048] = [2048, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2049] = [2049, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30];
bs[2050] = [2050, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31];
bs[2051] = [2051, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2052] = [2052, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2053] = [2053, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30];
bs[2054] = [2054, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31];
bs[2055] = [2055, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2056] = [2056, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30];
bs[2057] = [2057, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31];
bs[2058] = [2058, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31];
bs[2059] = [2059, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2060] = [2060, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30];
bs[2061] = [2061, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31];
bs[2062] = [2062, 30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31];
bs[2063] = [2063, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2064] = [2064, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30];
bs[2065] = [2065, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31];
bs[2066] = [2066, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31];
bs[2067] = [2067, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2068] = [2068, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30];
bs[2069] = [2069, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31];
bs[2070] = [2070, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30];
bs[2071] = [2071, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2072] = [2072, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30];
bs[2073] = [2073, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31];
bs[2074] = [2074, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2075] = [2075, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2076] = [2076, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30];
bs[2077] = [2077, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31];
bs[2078] = [2078, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2079] = [2079, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30];
bs[2080] = [2080, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30];
bs[2081] = [2081, 31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30];
bs[2082] = [2082, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30];
bs[2083] = [2083, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30];
bs[2084] = [2084, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30];
bs[2085] = [2085, 31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30];
bs[2086] = [2086, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30];
bs[2087] = [2087, 31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30];
bs[2088] = [2088, 30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30];
bs[2089] = [2089, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30];
bs[2090] = [2090, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30];
bs[2091] = [2091, 31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30];
bs[2092] = [2092, 30, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30];
bs[2093] = [2093, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30];
bs[2094] = [2094, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30];
bs[2095] = [2095, 31, 31, 32, 31, 31, 31, 30, 29, 30, 30, 30, 30];
bs[2096] = [2096, 30, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30];
bs[2097] = [2097, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30];
bs[2098] = [2098, 31, 31, 32, 31, 31, 31, 29, 30, 29, 30, 29, 31];
bs[2099] = [2099, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31];
var leapYears = [];

for (var i = 2000; i < 2100; i++) {
  var totalD = 0;

  for (var j = 1; j <= 12; j++) {
    totalD += bs[i][j];
  }

  if (totalD === 366) leapYears.push(i);
}

var currentYear = 2000;
var currentMonth = 1;
var daysInEnglish = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
var fullDaysInEnglish = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
var daysInNepali = ['आइत', 'सोम', 'मंगल', 'बुध', 'बिहि', 'शुक्र', 'शनि'];
var fullDaysInNepali = ['आइतवार', 'सोमवार', 'मंगलवार', 'बुधवार', 'बिहिवार', 'शुक्रवार', 'शनिवार'];
var monthsInEnglish = ['Baishakh', 'Jestha', 'Ashadh', 'Shrawan', 'Bhadra', 'Ashoj', 'Kartik', 'Mangsir', 'Poush', 'Magh', 'Falgun', 'Chaitra'];
var monthsInNepali = ['बैशाख', 'जेठ', 'असार', 'श्रावण', 'भदौ', 'असोज', 'कार्तिक', 'मंसिर', 'पुष', 'माघ', 'फाल्गुन', 'चैत्र'];
var nepaliNumber = ['०', '१', '२', '३', '४', '५', '६', '७', '८', '९'];

var getNepaliNumber = function getNepaliNumber(engNum) {
  return engNum.toString().split('').map(function (n) {
    return nepaliNumber[n];
  }).join('');
};

var getEnglishNumber = function getEnglishNumber(nepNum) {
  return parseInt(nepNum.toString().split('').map(function (n) {
    return nepaliNumber.indexOf(n);
  }).join(''));
};

var getFormattedDay = function getFormattedDay(language, length, index) {
  if (language === 'NE') {
    if (length === 'DDD') {
      return daysInNepali[index];
    } else {
      return fullDaysInNepali[index];
    }
  } else {
    if (length === 'DDD') {
      return daysInEnglish[index];
    } else {
      return fullDaysInEnglish[index];
    }
  }
};

var getFormattedMonth = function getFormattedMonth(language, index) {
  if (language === 'NE') {
    index = getEnglishNumber(index);
    index--;
    return monthsInNepali[index];
  } else {
    index--;
    return monthsInEnglish[index];
  }
};

var getFullEnglishDate = function getFullEnglishDate(englishDate) {
  var splittedDate = englishDate.split('-');

  if (splittedDate.length !== 3) {
    console.error('error spliting the date');
  }

  var year = splittedDate[0];
  var month = splittedDate[1];
  var day = splittedDate[2];
  var selectedDate = year + "-" + (splittedDate[1] > 9 ? month : '0' + month) + "-" + (splittedDate[2] > 9 ? day : '0' + day);
  return selectedDate;
};

var convertFullDateToNepali = function convertFullDateToNepali(englishDate) {
  var splittedDate = englishDate.split('-');

  if (splittedDate.length !== 3) {
    console.error('error spliting the date');
    return -1;
  }

  var year = getNepaliNumber(splittedDate[0]);
  var month = getNepaliNumber(splittedDate[1]);
  var day = getNepaliNumber(splittedDate[2]);
  var selectedNepaliDate = year + "-" + (splittedDate[1] > 9 ? month : '०' + month) + "-" + (splittedDate[2] > 9 ? day : '०' + day);
  return selectedNepaliDate;
};

var styles = {"theme-header-default":"_1mUuW","theme-header-arrow-default":"_bBYU7","theme-header-red":"_3b2pY","theme-header-arrow-red":"_3fQ0n","theme-header-blue":"_3fNxl","theme-header-arrow-blue":"_16z_f","theme-header-green":"_CLB6y","theme-header-arrow-green":"_O7ihw","theme-header-dark":"_-Ua3q","theme-header-arrow-dark":"_28F1u","theme-header-deepdark":"_P6QvD","theme-header-arrow-deepdark":"_1jvha","header":"_1Op28","header__mycontainer":"_1GhOp","arrow":"_3fmCl","arrow-left":"_1ydFT","arrow-right":"_1Pw8c","header__mycontainer__select":"_2aNF9"};

var Header = function Header(props) {
  var renderYear = function renderYear() {
    return Array(2100 - 2000).fill().map(function (_, idx) {
      return 2000 + idx;
    }).map(function (val, i) {
      return /*#__PURE__*/React.createElement("option", {
        key: i,
        value: val
      }, props.language === 'NE' ? getNepaliNumber(val) : val);
    });
  };

  return /*#__PURE__*/React.createElement("div", {
    className: styles.header + " " + styles['theme-header-' + props.theme]
  }, /*#__PURE__*/React.createElement("p", {
    onClick: props.bsPrevious,
    className: styles.arrow + " " + styles['arrow-left'] + " " + styles['theme-header-arrow-' + props.theme] + " "
  }), /*#__PURE__*/React.createElement("div", {
    className: styles.header__mycontainer
  }, /*#__PURE__*/React.createElement("select", {
    className: styles.header__mycontainer__select,
    value: props.currentMonth,
    onChange: props.bsMonthJump
  }, props.language === 'NE' ? monthsInNepali.map(function (mon, i) {
    return /*#__PURE__*/React.createElement("option", {
      key: i,
      value: i + 1
    }, mon);
  }) : monthsInEnglish.map(function (mon, i) {
    return /*#__PURE__*/React.createElement("option", {
      key: i,
      value: i + 1
    }, mon);
  })), /*#__PURE__*/React.createElement("select", {
    className: styles.header__mycontainer__select,
    value: props.currentYear,
    onChange: props.bsYearJump
  }, renderYear())), /*#__PURE__*/React.createElement("p", {
    onClick: props.bsNext,
    className: styles.arrow + " " + styles['arrow-right'] + " " + styles['theme-header-arrow-' + props.theme]
  }));
};

var styles$1 = {"react-calendar":"_2xcMq","react-calendar__input":"_1oYOS","react-calendar__days":"_d8Qqp","react-calendar__days-day":"_1yGdK","react-calendar__dates":"_1hh2I","react-calendar__dates-date":"_249_g","react-calendar__dates-null":"_3zttl","theme-react-calendar__dates-date-default":"_3zVi3","theme-react-calendar__dates-null-default":"_1plWg","theme-react-calendar__dates-date__today-default":"_WrIdy","theme-react-calendar__dates-date__selected-default":"_1ImcB","react-calendar__dates-date__disabled-default":"_1EpF_","theme-react-calendar__dates-date-red":"_ZCqJx","theme-react-calendar__dates-null-red":"_3e-oj","theme-react-calendar__dates-date__today-red":"_3vljT","theme-react-calendar__dates-date__selected-red":"_3VNRW","theme-react-calendar__dates-date-blue":"_2wmIR","theme-react-calendar__dates-null-blue":"_3EzT1","theme-react-calendar__dates-date__today-blue":"_3gFNc","theme-react-calendar__dates-date__selected-blue":"_2nANS","theme-react-calendar__dates-date-green":"_3xYsN","theme-react-calendar__dates-null-green":"_2_YcJ","theme-react-calendar__dates-date__today-green":"_3SPPg","theme-react-calendar__dates-date__selected-green":"_3sNLR","theme-react-calendar__dates-date-dark":"_2eP5_","theme-react-calendar__dates-null-dark":"_24Vzw","theme-react-calendar__dates-date__today-dark":"_162w5","theme-react-calendar__dates-date__selected-dark":"_hp0wX","theme-react-calendar__dates-date-deepdark":"_3EEI2","theme-react-calendar__dates-null-deepdark":"_39dGG","theme-react-calendar__dates-deepdark":"_3Rbbx","theme-react-calendar__days-deepdark":"_2ssp5","theme-react-calendar__dates-date__today-deepdark":"_31Ucq","theme-react-calendar__dates-date__selected-deepdark":"_3KUO-","theme-react-calendar-deepdark":"_3NEDk","theme-react-calendar__dates-date__disabled-deepdark":"_24nn5","react-calendar__dates-date__today":"_1oebL","react-calendar__dates-date__selected":"_FsLy_","react-calendar__dates-date__disabled":"_3_2T4"};

var NameOfDays = function NameOfDays(props) {
  return /*#__PURE__*/React.createElement(React.Fragment, null, props.language === 'NE' ? daysInNepali.map(function (el, i) {
    return /*#__PURE__*/React.createElement("span", {
      className: styles$1['react-calendar__days-day'],
      key: i
    }, el);
  }) : daysInEnglish.map(function (el, i) {
    return /*#__PURE__*/React.createElement("span", {
      className: styles$1['react-calendar__days-day'],
      key: i
    }, el);
  }));
};

function adToBs() {
  var startDate = new Date('1943-04-14');
  var today = new Date();
  var daysDifference = Math.floor((today.getTime() - startDate.getTime()) / 86400000);
  return evaluateNepaliDate(daysDifference);
}

function evaluateNepaliDate(daysElpased) {
  var currentYear = 0;
  var currentMonth = 0;
  var currentDay = 0;
  var totalD = 0;
  var flag = false;

  for (var i = 2000; i < 2100; i++) {
    if (flag) {
      break;
    }

    for (var j = 1; j <= 12; j++) {
      totalD += bs[i][j];

      if (daysElpased - totalD < 0) {
        currentDay = daysElpased - totalD + bs[i][j] + 1;
        flag = true;
        currentYear = i;
        currentMonth = j;
        break;
      }
    }
  }

  return {
    currentYear: currentYear,
    currentMonth: currentMonth,
    currentDay: currentDay
  };
}

function bsToAd(selectedDate) {
  var splittedDate = selectedDate.split('-');
  var year = parseInt(splittedDate[0]);
  var month = parseInt(splittedDate[1]);
  var day = parseInt(splittedDate[2]);
  var daysDiff = 0;

  for (var i = 2000; i <= year; i++) {
    if (i === year) {
      for (var j = 1; j < month; j++) {
        daysDiff += bs[i][j];
      }

      daysDiff += day - 1;
    } else {
      for (var _j = 1; _j <= 12; _j++) {
        daysDiff += bs[i][_j];
      }
    }
  }

  return evaluateEnglishDate('1943-04-14', daysDiff);
}

function evaluateEnglishDate(date, days) {
  var result = new Date(date);
  result.setDate(result.getDate() + days);
  var year = result.getFullYear();
  var month = result.getMonth() + 1;
  var day = result.getDate();
  return year + "-" + (month > 9 ? month : '0' + month) + "-" + (day > 9 ? day : '0' + day);
}

var RenderCalendar = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(RenderCalendar, _PureComponent);

  function RenderCalendar() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;

    _this.getDate = function (td) {
      return _this.props.language === 'NE' ? convertFullDateToNepali(_this.props.currentYear + '-' + _this.props.currentMonth + '-' + getEnglishNumber(td)) : getFullEnglishDate(_this.props.currentYear + '-' + _this.props.currentMonth + '-' + td);
    };

    _this.applyTodayCss = function (td) {
      return _this.props.today === _this.getDate(td) ? styles$1['react-calendar__dates-date__today'] + " " + styles$1['theme-react-calendar__dates-date__today-' + _this.props.theme] : '';
    };

    _this.applySelectedDateCss = function (td) {
      return _this.props.selectedDate === _this.getDate(td) ? styles$1['react-calendar__dates-date__selected'] + " " + styles$1['theme-react-calendar__dates-date__selected-' + _this.props.theme] : '';
    };

    _this.applyDisabledDateCss = function (td) {
      return _this.props.isDateToDisable(td) ? styles$1['react-calendar__dates-date__disabled'] + " " + styles$1['theme-react-calendar__dates-date__disabled-' + _this.props.theme] : '';
    };

    _this.applyDateCss = function (td) {
      return td ? styles$1['react-calendar__dates-date'] + " " + styles$1['theme-react-calendar__dates-date-' + _this.props.theme] : styles$1['react-calendar__dates-null'] + " " + styles$1['theme-react-calendar__dates-null-' + _this.props.theme];
    };

    return _this;
  }

  var _proto = RenderCalendar.prototype;

  _proto.render = function render() {
    var _this2 = this;

    return this.props.bsCalendar().map(function (tr, i) {
      return /*#__PURE__*/React.createElement(React.Fragment, {
        key: i
      }, tr.map(function (td, j) {
        return /*#__PURE__*/React.createElement("span", {
          onClick: function onClick() {
            return _this2.props.onDateClick(td);
          },
          key: j,
          className: "\n\t\t\t\t\t\t" + _this2.applyDateCss(td) + " \n\t\t\t\t\t\t" + _this2.applyTodayCss(td) + "\n\t\t\t\t\t\t" + _this2.applySelectedDateCss(td) + "\n\t\t\t\t\t\t" + _this2.applyDisabledDateCss(td)
        }, td);
      }));
    });
  };

  return RenderCalendar;
}(PureComponent);

var Calendar = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Calendar, _Component);

  function Calendar() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      currentMonth: currentMonth,
      currentYear: currentYear,
      currentDay: 1,
      dates: [],
      showCalendar: false,
      selectedDate: '',
      today: '',
      language: 'NE',
      theme: 'default',
      hideDefaultValue: _this.props.hideDefaultValue
    };
    _this.wrapperRef = React.createRef();
    _this.inputRef = React.createRef();

    _this.handleClickOutside = function (event) {
      if (_this.state.showCalendar && _this.wrapperRef && !_this.wrapperRef.current.contains(event.target)) {
        _this.setState({
          showCalendar: false
        });
      }
    };

    _this.validateTheme = function (th) {
      var theme = th || 'default';
      theme = theme.toString().toLowerCase();

      switch (theme) {
        case 'red':
          theme = 'red';
          break;

        case 'blue':
          theme = 'blue';
          break;

        case 'green':
          theme = 'green';
          break;

        case 'dark':
          theme = 'dark';
          break;

        case 'deepdark':
          theme = 'deepdark';
          break;

        default:
          theme = 'default';
          break;
      }

      return theme;
    };

    _this.validateLanguage = function (ln) {
      var language = ln || 'NE';
      language = language.toString().toUpperCase();
      var lang = 'NE';

      switch (language) {
        case 'EN':
        case 'ENGLISH':
          lang = 'EN';
          break;

        default:
          lang = 'NE';
          break;
      }

      return lang;
    };

    _this.calcFirstDay = function () {
      var month = _this.state.currentMonth;
      var year = _this.state.currentYear;
      var diff = year - 2000;
      var leapYear = 0;
      var firstDay;

      for (var l = 0; l < leapYears.length; l++) {
        if (year > leapYears[l]) {
          leapYear++;
        }
      }

      if (year > 2096) {
        leapYear--;
      }

      var td = 3 + diff * 365 + leapYear;

      if (month - 1 > 0) {
        for (var i = 1; i < month; i++) {
          td += bs[year][i];
        }

        firstDay = td % 7;
      } else {
        firstDay = td % 7;
      }

      td = 0;
      return firstDay;
    };

    _this.bsCalendar = function () {
      var month = _this.state.currentMonth;
      var year = _this.state.currentYear;

      var firstDay = _this.calcFirstDay();

      var tbl = [];
      var daysInMonth = bs[year][month];
      var date = 1;

      for (var i = 0; i < 6; i++) {
        var row = [];

        for (var j = 0; j < 7; j++) {
          if (i === 0 && j < firstDay) {
            row.push('');
          } else if (date > daysInMonth) {
            row.push('');
          } else {
            if (_this.state.language === 'NE') {
              var convertToNepali = getNepaliNumber(date);
              row.push(convertToNepali);
            } else {
              row.push(date);
            }

            date++;
          }
        }

        tbl.push(row);
      }

      return tbl;
    };

    _this.bsNext = function () {
      if (_this.state.currentYear === 2099 && _this.state.currentMonth === 12) {
        return -1;
      }

      var currentYear = _this.state.currentMonth === 12 ? _this.state.currentYear + 1 : _this.state.currentYear;
      var currentMonth = (_this.state.currentMonth + 1) % 13 ? _this.state.currentMonth + 1 : 1;

      _this.setState({
        currentYear: currentYear,
        currentMonth: currentMonth
      });
    };

    _this.bsPrevious = function () {
      if (_this.state.currentYear === 2000 && _this.state.currentMonth === 1) {
        return -1;
      }

      var currentYear = _this.state.currentMonth === 1 ? _this.state.currentYear - 1 : _this.state.currentYear;
      var currentMonth = _this.state.currentMonth === 1 ? 12 : _this.state.currentMonth - 1;

      _this.setState({
        currentYear: currentYear,
        currentMonth: currentMonth
      });
    };

    _this.bsMonthJump = function (e) {
      var currentMonth = parseInt(e.target.value);

      _this.setState({
        currentMonth: currentMonth
      });
    };

    _this.bsYearJump = function (e) {
      var currentYear = parseInt(e.target.value);

      _this.setState({
        currentYear: currentYear
      });
    };

    _this.onDateClick = function (day) {
      if (!day) return -1;
      if (_this.isDateToDisable(day)) return -1;
      var englishNumber = _this.state.language === 'NE' ? getEnglishNumber(day) : day;

      _this.setState({
        currentDay: englishNumber,
        selectedDate: _this.state.currentYear + "-" + _this.state.currentMonth + "-" + englishNumber,
        showCalendar: false,
        hideDefaultValue: false
      });

      _this.props.onChange(_this.formatDate(_this.state.language === 'NE' ? convertFullDateToNepali(_this.state.currentYear + '-' + _this.state.currentMonth + '-' + englishNumber) : getFullEnglishDate(_this.state.currentYear + '-' + _this.state.currentMonth + '-' + englishNumber)));
    };

    _this.formatDate = function (fullDate) {
      var splittedDate = fullDate.split('-');

      if (splittedDate.length !== 3) {
        console.log('error spliting the date');
        return -1;
      }

      _this.setState({
        selectedDate: fullDate
      });

      var year = splittedDate[0];
      var month = splittedDate[1];
      var day = splittedDate[2];
      var AdDate = bsToAd(_this.state.language === 'NE' ? getEnglishNumber(year) + '-' + getEnglishNumber(month) + '-' + getEnglishNumber(day) : year + '-' + month + '-' + day);

      var firstDay = _this.calcFirstDay();

      var weekendDay = (firstDay + (_this.state.language === 'NE' ? getEnglishNumber(day) : parseInt(day)) - 1) % 7;
      var dateFormat = _this.props.dateFormat ? _this.props.dateFormat : 'YYYY-MM-DD';
      dateFormat = dateFormat.toUpperCase();

      if (dateFormat.includes('YYYY')) {
        dateFormat = dateFormat.replace('YYYY', year);
      } else if (dateFormat.includes('YYY')) {
        dateFormat = dateFormat.replace('YYY', year.toString().slice(1, 4));
      } else if (dateFormat.includes('YY')) {
        dateFormat = dateFormat.replace('YY', year.toString().slice(2, 4));
      }

      if (dateFormat.includes('MMMM')) {
        dateFormat = dateFormat.replace('MMMM', getFormattedMonth(_this.validateLanguage(_this.props.language), month));
      } else if (dateFormat.includes('MM')) {
        dateFormat = dateFormat.replace('MM', month);
      } else if (dateFormat.includes('M')) {
        dateFormat = dateFormat.replace('M', month[0] === '0' | month[0] === '०' ? month.substring(1) : month);
      }

      if (dateFormat.includes('DDDD')) {
        dateFormat = dateFormat.replace('DDDD', getFormattedDay(_this.validateLanguage(_this.props.language), 'DDDD', weekendDay));
      } else if (dateFormat.includes('DDD')) {
        dateFormat = dateFormat.replace('DDD', getFormattedDay(_this.validateLanguage(_this.props.language), 'DDD', weekendDay));
      }

      if (dateFormat.includes('DD')) {
        dateFormat = dateFormat.replace('DD', day);
      } else if (dateFormat.includes('D')) {
        dateFormat = dateFormat.replace('D', day[0] === '0' | day[0] === '०' ? day.substring(1) : day);
      }

      _this.setState({
        formatedDate: dateFormat
      });

      return {
        bsDate: dateFormat,
        adDate: AdDate
      };
    };

    _this.isDateToDisable = function (td) {
      td = _this.state.language === 'NE' ? getEnglishNumber(td) : td;
      var minDate = _this.validateDate(_this.props.minDate) ? _this.props.minDate : '--';
      var maxDate = _this.validateDate(_this.props.maxDate) ? _this.props.maxDate : '--';
      var splittedMinDate = minDate.split('-');
      var splittedMaxDate = maxDate.split('-');
      var minYear = parseInt(splittedMinDate[0]);
      var minMonth = parseInt(splittedMinDate[1]);
      var minDay = splittedMinDate[2];
      var maxYear = parseInt(splittedMaxDate[0]);
      var maxMonth = parseInt(splittedMaxDate[1]);
      var maxDay = parseInt(splittedMaxDate[2]);

      if (_this.state.currentYear < minYear || _this.state.currentYear > maxYear) {
        return true;
      } else if (_this.state.currentYear === minYear && _this.state.currentMonth < minMonth || _this.state.currentYear === maxYear && _this.state.currentMonth > maxMonth) {
        return true;
      } else if (_this.state.currentYear === minYear && _this.state.currentMonth === minMonth && td <= minDay || _this.state.currentYear === maxYear && _this.state.currentMonth === maxMonth && td >= maxDay) {
        return true;
      }
    };

    _this.validateDate = function (date) {
      if (!date) {
        return false;
      }

      if (date.split('-').length !== 3) {
        return false;
      }

      return true;
    };

    return _this;
  }

  var _proto = Calendar.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    var _adToBs = adToBs(),
        currentYear = _adToBs.currentYear,
        currentMonth = _adToBs.currentMonth,
        currentDay = _adToBs.currentDay;

    var language = this.validateLanguage(this.props.language);
    var theme = this.validateTheme(this.props.theme);
    var today = language === 'NE' ? convertFullDateToNepali(currentYear + '-' + currentMonth + '-' + currentDay) : getFullEnglishDate(currentYear + '-' + currentMonth + '-' + currentDay);

    if (this.validateDate(this.props.defaultDate)) {
      var splittedDate = this.props.defaultDate.split('-');
      var year = parseInt(splittedDate[0]);
      var month = parseInt(splittedDate[1]);
      var day = parseInt(splittedDate[2]);
      if (year < 2000 && year > 2099 && month < 1 && month > 12) return -1;
      currentYear = year;
      currentMonth = month;
      currentDay = day;
    }

    this.setState({
      currentYear: currentYear,
      currentMonth: currentMonth,
      currentDay: currentDay,
      today: today,
      language: language,
      theme: theme
    }, function () {
      if (_this2.state.hideDefaultValue) _this2.formatDate(language === 'NE' ? convertFullDateToNepali(currentYear + '-' + currentMonth + '-' + currentDay) : getFullEnglishDate(currentYear + '-' + currentMonth + '-' + currentDay));else _this2.props.onChange(_this2.formatDate(language === 'NE' ? convertFullDateToNepali(currentYear + '-' + currentMonth + '-' + currentDay) : getFullEnglishDate(currentYear + '-' + currentMonth + '-' + currentDay)));
    });
    document.addEventListener('mousedown', this.handleClickOutside);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    document.removeEventListener('mousedown', this.handleClickOutside);
  };

  _proto.render = function render() {
    var _this3 = this;

    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
      ref: this.wrapperRef,
      style: {
        top: this.inputRef.current ? this.inputRef.current.clientHeight + 5 : 31
      },
      className: styles$1['react-calendar'] + " " + styles$1['theme-react-calendar-' + this.state.theme]
    }, this.state.showCalendar && /*#__PURE__*/React.createElement("div", {
      className: ""
    }, /*#__PURE__*/React.createElement(Header, {
      currentMonth: this.state.currentMonth,
      currentYear: this.state.currentYear,
      bsNext: this.bsNext,
      bsPrevious: this.bsPrevious,
      bsMonthJump: this.bsMonthJump,
      bsYearJump: this.bsYearJump,
      language: this.state.language,
      theme: this.state.theme
    }), /*#__PURE__*/React.createElement("div", {
      className: styles$1['react-calendar__body']
    }, /*#__PURE__*/React.createElement("div", {
      className: styles$1['react-calendar__days'] + " " + styles$1['theme-react-calendar__days-' + this.state.theme]
    }, /*#__PURE__*/React.createElement(NameOfDays, {
      language: this.state.language
    })), /*#__PURE__*/React.createElement("div", {
      className: styles$1['react-calendar__dates'] + " " + styles$1['theme-react-calendar__dates-' + this.state.theme]
    }, ' ', /*#__PURE__*/React.createElement(RenderCalendar, {
      bsCalendar: this.bsCalendar,
      onDateClick: this.onDateClick,
      today: this.state.today,
      language: this.state.language,
      currentYear: this.state.currentYear,
      currentMonth: this.state.currentMonth,
      selectedDate: this.state.selectedDate,
      theme: this.state.theme,
      minDate: this.props.minDate,
      maxDate: this.props.maxDate,
      isDateToDisable: this.isDateToDisable
    }), ' ')), /*#__PURE__*/React.createElement("div", null, this.props.clearable && React.createElement(this.props.clearableBtn, {
      onClick: this.props.clearableClickHandler,
      children: this.props.clearableBtnText
    })))), /*#__PURE__*/React.createElement("input", _extends({
      ref: this.inputRef,
      readOnly: true,
      className: styles$1['react-calendar__input'] + " " + this.props.className,
      style: _extends({}, this.props.style),
      placeholder: this.props.placeholder,
      onClick: function onClick() {
        return _this3.setState({
          showCalendar: true
        });
      },
      type: "text",
      defaultValue: this.state.hideDefaultValue ? '' : this.state.formatedDate
    }, this.props.inputProps)));
  };

  return Calendar;
}(Component);

Calendar.defaultProps = {
  onChange: function onChange() {},
  className: '',
  clearable: false,
  clearableBtn: null,
  language: 'NE',
  theme: 'default',
  dateFormat: 'YYYY-MM-DD',
  style: {},
  minDate: '',
  maxDate: '',
  defaultDate: '',
  hideDefaultValue: false,
  inputProps: {}
};

export { Calendar, convertFullDateToNepali };
//# sourceMappingURL=index.esm.js.map
